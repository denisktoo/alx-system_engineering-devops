https://www.canva.com/design/DAGvlkbsn6U/G3V7alyn477cwyM7v23ILg/edit?utm_content=DAGvlkbsn6U&utm_campaign=designshare&utm_medium=link2&utm_source=sharebutton

Scaled Infrastructure Summary - www.foobar.com

Overview:
A scaled web infrastructure designed to handle higher traffic and improve reliability by adding load balancer redundancy and server separation. It expands upon the simple one-server setup by adding some redundancy and dedicated server functions.

Components:
1. DNS Resolution
   - Role: Points www.foobar.com domain to load balancer cluster at 8.8.8.8
   - Reason for Addition: Directs user traffic to the load balancing layer

2. Load Balancer Cluster (HAProxy)
   - Role: Two HAProxy instances - Primary (8.8.8.8) and Secondary cluster partner
   - Reason for Addition: Eliminates single point of failure at load balancing layer, improves availability

3. Dedicated Web Server (Nginx)
   - Role: Handles HTTP requests, serves static files (HTML/CSS/JS), contains application files
   - Reason for Addition: Specialized for web serving tasks, better performance than mixed-purpose server

4. Dedicated Application Server
   - Role: Runs application logic and business logic processing, contains application files
   - Reason for Addition: Dedicated processing power for application code, no resource contention

5. Dedicated Database Server
   - Role: MySQL database with data storage, queries, backup and replication capabilities
   - Reason for Addition: Optimized for database operations, isolated from other server functions

6. Application Files Replication
   - Role: Codebase replicated across web and application servers
   - Reason for Addition: Ensures consistency and availability of application code

Infrastructure Improvements Made:
- Eliminates single point of failure at load balancer level
- Improves performance through server specialization
- Reduces resource contention by separating server functions
- Provides load balancer redundancy for high availability

Infrastructure Issues:
* SSL Termination at Load Balancer: If implemented, unencrypted traffic would flow between load balancer and backend servers, creating internal security vulnerability if network is compromised
* Single MySQL Writer: Only one database server accepts writes, creating single point of failure - if database goes down, no write operations possible, affecting application availability
* Component Separation: Actually GOOD here - dedicated servers avoid resource contention, performance issues, and security risks that occur when database, web server, and application server compete for same resources on one machine
